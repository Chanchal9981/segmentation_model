# -*- coding: utf-8 -*-
"""Segmentations_with_using_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E84L9Mwvu4Q5eMY6Hag7GlhIAYMAEQz3
"""

#!pip install -U segmentation-models-pytorch
!pip install segmentation-models-pytorch

!git clone https://github.com/alexgkendall/SegNet-Tutorial

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/SegNet-Tutorial/CamVid

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt

DATA_DIR = "/content/SegNet-Tutorial/CamVid"

x_train_dir = os.path.join(DATA_DIR, 'train')
print("total number of imgs is",len(x_train_dir))
y_train_dir = os.path.join(DATA_DIR, 'trainannot')
x_valid_dir = os.path.join(DATA_DIR, 'val')
print("total number of imgs is",len(x_valid_dir))
y_valid_dir = os.path.join(DATA_DIR, 'valannot')
x_test_dir = os.path.join(DATA_DIR, 'test')
y_test_dir = os.path.join(DATA_DIR, 'testannot')

# helper function for data visualization
def visualize(**images):
  """PLot images in one row."""
  n = len(images)
  plt.figure(figsize=(16, 5))
  for i, (name, image) in enumerate(images.items()):
    plt.subplot(1, n, i + 1)
    plt.xticks([])
    plt.yticks([])
    plt.title(' '.join(name.split('_')).title())
    plt.imshow(image)
  plt.show()

"""# **Dataloader**"""

from torch.utils.data import DataLoader
from torch.utils.data import Dataset as BaseDataset

class Dataset(BaseDataset):
  CLASSES=['sky','building','pole','road','pavement',
           'tree','signsymbol','fence','car','pedestrian','bicyclist','unlabelled']
  def __init__(self,images_dir,masks_dir,classes=None,augmentation=None,preprocessing=None):
    self.ids = os.listdir(images_dir)
    self.images_fps = [os.path.join(images_dir, image_id) for image_id in self.ids]
    self.masks_fps = [os.path.join(masks_dir, image_id) for image_id in self.ids]
    # convert str names to class values on masks
    self.class_values=[self.CLASSES.index(cls.lower()) for cls in classes]
    self.augmentation=augmentation
    self.preprocessing=preprocessing
  def __getitem__(self, i):
    # read data
    image = cv2.imread(self.images_fps[i])
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    mask = cv2.imread(self.masks_fps[i],0)
    # extract certain classes from mask (e.g. cars)
    masks = [(mask == v) for v in self.class_values]
    mask = np.stack(masks, axis=-1).astype('float')
    # apply augmentations
    if self.augmentation:
      sample = self.augmentation(image=image, mask=mask)
      image, mask = sample['image'], sample['mask']
    # apply preprocessing
    if self.preprocessing:
      sample = self.preprocessing(image=image, mask=mask)
      image,mask=sample['image'],sample['mask']
    return image, mask
  def __len__(self):
    return len(self.ids)

# Lets look at data we have
dataset = Dataset(x_train_dir, y_train_dir, classes=['car'])
image, mask = dataset[1] # get some sample
visualize(image=image,cars_mask=mask.squeeze())

"""**Augmentations**"""

import albumentations as albu
def get_training_augmentation():
  train_transform=[
      albu.HorizontalFlip(p=0.5),
      albu.ShiftScaleRotate(scale_limit=0.5, rotate_limit=0, shift_limit=0.1, p=1, border_mode=0),
      albu.PadIfNeeded(min_height=320, min_width=320, always_apply=True, border_mode=0),
      albu.RandomCrop(height=320, width=320, always_apply=True),
      albu.IAAAdditiveGaussianNoise(p=0.2),
      albu.IAAPerspective(p=0.5),
      albu.OneOf([albu.CLAHE(p=1),albu.RandomBrightness(p=1),albu.RandomGamma(p=1)],p=0.9),
      albu.OneOf([albu.IAASharpen(p=1),albu.Blur(blur_limit=3, p=1),albu.MotionBlur(blur_limit=3,p=1)],p=0.9),
      albu.OneOf([albu.RandomContrast(p=1),albu.HueSaturationValue(p=1)],p=0.9)]
  return albu.Compose(train_transform)
def get_validation_augmentation():
  """Add paddings to make image shape divisible by 32"""
  test_transform=[
      albu.PadIfNeeded(384, 480)]
  return albu.Compose(test_transform)
def to_tensor(x, **kwargs):
  return x.transpose(2, 0, 1).astype('float32')
def get_preprocessing(preprocessing_fn):
  _transform=[albu.Lambda(image=preprocessing_fn),albu.Lambda(image=to_tensor, mask=to_tensor)]
  return albu.Compose(_transform)

#### Visualize resulted augmented images and masks
augmented_dataset=Dataset(
    x_train_dir, 
    y_train_dir, 
    augmentation=get_training_augmentation(), 
    classes=['car'],
)
print("total number of Augmented img is",len(augmented_dataset))
# same image with different random transforms
for i in range(1):
  image, mask = augmented_dataset[1]
  visualize(image=image, mask=mask.squeeze(-1))

"""**Create model and train**"""

import torch
import numpy as np
import segmentation_models_pytorch as smp
#from segmentation_models_pytorch import utils as smp_utils

ENCODER = "resnet34"
#ENCODER ='se_resnext50_32x4d'
ENCODER_WEIGHTS = 'imagenet'
CLASSES = ['car']
ACTIVATION = 'sigmoid' # could be None for logits or 'softmax2d' for multiclass segmentation
# create segmentation model with pretrained encoder

model=smp.UnetPlusPlus(
    encoder_name=ENCODER, 
    encoder_weights=ENCODER_WEIGHTS, 
    classes=len(CLASSES), 
    activation=ACTIVATION,
)
preprocessing_fn = smp.encoders.get_preprocessing_fn(ENCODER, ENCODER_WEIGHTS)

train_dataset=Dataset(
    x_train_dir, 
    y_train_dir, 
    augmentation=get_training_augmentation(), 
    preprocessing=get_preprocessing(preprocessing_fn),
    classes=CLASSES)
valid_dataset=Dataset(
    x_valid_dir, 
    y_valid_dir, 
    augmentation=get_validation_augmentation(), 
    preprocessing=get_preprocessing(preprocessing_fn),
    classes=CLASSES)
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True, num_workers=12)
valid_loader = DataLoader(valid_dataset, batch_size=1, shuffle=False, num_workers=4)

from segmentation_models_pytorch import utils as smp_utils
loss=smp_utils.losses.DiceLoss()
metrics=[smp_utils.metrics.IoU(threshold=0.5)]
optimizer = torch.optim.Adam([dict(params=model.parameters(), lr=0.0001)])

train_epoch = smp_utils.train.TrainEpoch(
    model, 
    loss=loss, 
    metrics=metrics, 
    optimizer=optimizer,
    #device=DEVICE,
    verbose=True,
)

valid_epoch = smp_utils.train.ValidEpoch(
    model, 
    loss=loss, 
    metrics=metrics, 
    #device=DEVICE,
    verbose=True,
)

max_score = 0
for i in range(0, 40):
  print('\nEpoch: {}'.format(i))
  train_logs = train_epoch.run(train_loader)
  valid_logs = valid_epoch.run(valid_loader)
  # do something (save model, change lr, etc.)
  if max_score < valid_logs['iou_score']:
    max_score = valid_logs['iou_score']
    torch.save(model, '/content/SegNet-Tutorial/CamVid/best_model.pth')
    print('Model saved!')
  if i == 25:
    optimizer.param_groups[0]['lr'] = 1e-5
    print('Decrease decoder learning rate to 1e-5!')

